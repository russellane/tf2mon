"""Admin Console."""

import re

from loguru import logger

from tf2mon.hacker import HackerAttr
from tf2mon.regex import Regex


class Admin:
    """Admin Console."""

    def __init__(self, monitor):
        """Initialize Admin Console."""

        self.monitor = monitor
        self.single_step_re = None

        if self.monitor.options.breakpoint is not None:
            self.set_single_step_lineno(self.monitor.options.breakpoint)

        if pattern := self.monitor.options.search:
            if pattern.startswith("/"):
                pattern = pattern[1:]
            self.set_single_step_pattern(pattern)

        self._single_step_at_eof = False

        # Commands operator may type into monitor admin console:
        self.regex_list = [
            # stop single-stepping
            Regex("^(c|cont|continue)$", lambda m: self._stop_single_stepping()),
            # stop single-stepping until eof, then single-step again
            Regex("^(r|run|g|go)$", lambda m: self.set_single_step_lineno(0)),
            # dump internals
            Regex("^dump$", lambda m: self.monitor.dump()),
            # pause when logfile reaches `lineno`.
            Regex(
                R"^(b|break|breakpoint)[= ](?P<lineno>\d+)$",
                lambda m: self.set_single_step_lineno(int(m.group("lineno"))),
            ),
            # pause when logfile reaches next line that matches `pattern`.
            Regex(
                "^/(?P<pattern>.*)$", lambda m: self.set_single_step_pattern(m.group("pattern"))
            ),
            # kick cheater
            Regex(
                R"^kick[= ](?P<userid>\d+)$",
                lambda m: self.monitor.users.kick_userid(
                    int(m.group("userid")), HackerAttr.CHEATER
                ),
            ),
            # kick racist
            Regex(
                R"^kkk[= ](?P<userid>\d+)$",
                lambda m: self.monitor.users.kick_userid(
                    int(m.group("userid")), HackerAttr.RACIST
                ),
            ),
            # mark suspect
            Regex(
                R"^suspect[= ](?P<userid>\d+)$",
                lambda m: self.monitor.users.kick_userid(
                    int(m.group("userid")), HackerAttr.SUSPECT
                ),
            ),
            # drop to python debugger
            Regex("^PDB$", lambda m: self.monitor.breakpoint()),
            # The following aren't commands, but other items that may be in
            # the conlog. They don't belong in `gameplay` because they're
            # not generated by tf2.
            # qvalve
            Regex("^(QVALVE) (.*)", lambda m: logger.log(m.group(1), m.group(2))),
        ]

    def start_single_stepping(self):
        """Begin prompting operator before processing each line from con_logfile."""

        logger.debug("start")
        self.monitor.options.single_step = True

    def _stop_single_stepping(self):
        """End prompting operator before processing each line from con_logfile."""

        logger.debug("stop")
        self.monitor.options.single_step = False

    def set_single_step_lineno(self, lineno=0):
        """Begin single-stepping at `lineno` if given else at eof."""

        if lineno:
            self.monitor.conlog.inject_cmd(lineno, "SINGLE-STEP")
        else:
            # stop single-stepping until eof, then single-step again
            self._stop_single_stepping()
            self._single_step_at_eof = True

    def set_single_step_pattern(self, pattern=None):
        """Begin single-stepping at next line that matches `pattern`.

        Pass `None` to clear the pattern.
        """

        if not pattern:
            self.single_step_re = None
            logger.log("ADMIN", "Search pattern cleared.")
        else:
            flags = 0
            if pattern.endswith("/i"):
                pattern = pattern[:-2]
                flags = re.IGNORECASE
            elif pattern.endswith("/"):
                pattern = pattern[:-1]
            self.single_step_re = re.compile(pattern, flags)
            logger.log("ADMIN", f"Search pattern set: {self.single_step_re!r}")
